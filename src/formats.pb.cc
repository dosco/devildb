// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: formats.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "formats.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* ColumnCommitEntry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ColumnCommitEntry_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_formats_2eproto() {
  protobuf_AddDesc_formats_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "formats.proto");
  GOOGLE_CHECK(file != NULL);
  ColumnCommitEntry_descriptor_ = file->message_type(0);
  static const int ColumnCommitEntry_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnCommitEntry, row_key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnCommitEntry, column_family_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnCommitEntry, column_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnCommitEntry, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnCommitEntry, value_),
  };
  ColumnCommitEntry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ColumnCommitEntry_descriptor_,
      ColumnCommitEntry::default_instance_,
      ColumnCommitEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnCommitEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ColumnCommitEntry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ColumnCommitEntry));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_formats_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ColumnCommitEntry_descriptor_, &ColumnCommitEntry::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_formats_2eproto() {
  delete ColumnCommitEntry::default_instance_;
  delete ColumnCommitEntry_reflection_;
}

void protobuf_AddDesc_formats_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rformats.proto\"m\n\021ColumnCommitEntry\022\017\n\007"
    "row_key\030\001 \002(\t\022\025\n\rcolumn_family\030\002 \002(\t\022\016\n\006"
    "column\030\003 \002(\t\022\021\n\ttimestamp\030\004 \002(\003\022\r\n\005value"
    "\030\005 \001(\014", 126);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "formats.proto", &protobuf_RegisterTypes);
  ColumnCommitEntry::default_instance_ = new ColumnCommitEntry();
  ColumnCommitEntry::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_formats_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_formats_2eproto {
  StaticDescriptorInitializer_formats_2eproto() {
    protobuf_AddDesc_formats_2eproto();
  }
} static_descriptor_initializer_formats_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ColumnCommitEntry::kRowKeyFieldNumber;
const int ColumnCommitEntry::kColumnFamilyFieldNumber;
const int ColumnCommitEntry::kColumnFieldNumber;
const int ColumnCommitEntry::kTimestampFieldNumber;
const int ColumnCommitEntry::kValueFieldNumber;
#endif  // !_MSC_VER

ColumnCommitEntry::ColumnCommitEntry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ColumnCommitEntry::InitAsDefaultInstance() {
}

ColumnCommitEntry::ColumnCommitEntry(const ColumnCommitEntry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ColumnCommitEntry::SharedCtor() {
  _cached_size_ = 0;
  row_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  column_family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  column_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  timestamp_ = GOOGLE_LONGLONG(0);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ColumnCommitEntry::~ColumnCommitEntry() {
  SharedDtor();
}

void ColumnCommitEntry::SharedDtor() {
  if (row_key_ != &::google::protobuf::internal::kEmptyString) {
    delete row_key_;
  }
  if (column_family_ != &::google::protobuf::internal::kEmptyString) {
    delete column_family_;
  }
  if (column_ != &::google::protobuf::internal::kEmptyString) {
    delete column_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void ColumnCommitEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ColumnCommitEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ColumnCommitEntry_descriptor_;
}

const ColumnCommitEntry& ColumnCommitEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_formats_2eproto();
  return *default_instance_;
}

ColumnCommitEntry* ColumnCommitEntry::default_instance_ = NULL;

ColumnCommitEntry* ColumnCommitEntry::New() const {
  return new ColumnCommitEntry;
}

void ColumnCommitEntry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_row_key()) {
      if (row_key_ != &::google::protobuf::internal::kEmptyString) {
        row_key_->clear();
      }
    }
    if (has_column_family()) {
      if (column_family_ != &::google::protobuf::internal::kEmptyString) {
        column_family_->clear();
      }
    }
    if (has_column()) {
      if (column_ != &::google::protobuf::internal::kEmptyString) {
        column_->clear();
      }
    }
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ColumnCommitEntry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string row_key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_row_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->row_key().data(), this->row_key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_column_family;
        break;
      }

      // required string column_family = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column_family:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column_family()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->column_family().data(), this->column_family().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_column;
        break;
      }

      // required string column = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_column:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_column()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->column().data(), this->column().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_timestamp;
        break;
      }

      // required int64 timestamp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_value;
        break;
      }

      // optional bytes value = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ColumnCommitEntry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string row_key = 1;
  if (has_row_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_key().data(), this->row_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->row_key(), output);
  }

  // required string column_family = 2;
  if (has_column_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_family().data(), this->column_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->column_family(), output);
  }

  // required string column = 3;
  if (has_column()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->column(), output);
  }

  // required int64 timestamp = 4;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->timestamp(), output);
  }

  // optional bytes value = 5;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ColumnCommitEntry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string row_key = 1;
  if (has_row_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->row_key().data(), this->row_key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->row_key(), target);
  }

  // required string column_family = 2;
  if (has_column_family()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column_family().data(), this->column_family().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->column_family(), target);
  }

  // required string column = 3;
  if (has_column()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->column().data(), this->column().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->column(), target);
  }

  // required int64 timestamp = 4;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->timestamp(), target);
  }

  // optional bytes value = 5;
  if (has_value()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ColumnCommitEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string row_key = 1;
    if (has_row_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->row_key());
    }

    // required string column_family = 2;
    if (has_column_family()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column_family());
    }

    // required string column = 3;
    if (has_column()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->column());
    }

    // required int64 timestamp = 4;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional bytes value = 5;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ColumnCommitEntry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ColumnCommitEntry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ColumnCommitEntry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ColumnCommitEntry::MergeFrom(const ColumnCommitEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_row_key()) {
      set_row_key(from.row_key());
    }
    if (from.has_column_family()) {
      set_column_family(from.column_family());
    }
    if (from.has_column()) {
      set_column(from.column());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ColumnCommitEntry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ColumnCommitEntry::CopyFrom(const ColumnCommitEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ColumnCommitEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ColumnCommitEntry::Swap(ColumnCommitEntry* other) {
  if (other != this) {
    std::swap(row_key_, other->row_key_);
    std::swap(column_family_, other->column_family_);
    std::swap(column_, other->column_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ColumnCommitEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ColumnCommitEntry_descriptor_;
  metadata.reflection = ColumnCommitEntry_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
