// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: formats.proto

#ifndef PROTOBUF_formats_2eproto__INCLUDED
#define PROTOBUF_formats_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_formats_2eproto();
void protobuf_AssignDesc_formats_2eproto();
void protobuf_ShutdownFile_formats_2eproto();

class ColumnCommitEntry;

// ===================================================================

class ColumnCommitEntry : public ::google::protobuf::Message {
 public:
  ColumnCommitEntry();
  virtual ~ColumnCommitEntry();

  ColumnCommitEntry(const ColumnCommitEntry& from);

  inline ColumnCommitEntry& operator=(const ColumnCommitEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ColumnCommitEntry& default_instance();

  void Swap(ColumnCommitEntry* other);

  // implements Message ----------------------------------------------

  ColumnCommitEntry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ColumnCommitEntry& from);
  void MergeFrom(const ColumnCommitEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string row_key = 1;
  inline bool has_row_key() const;
  inline void clear_row_key();
  static const int kRowKeyFieldNumber = 1;
  inline const ::std::string& row_key() const;
  inline void set_row_key(const ::std::string& value);
  inline void set_row_key(const char* value);
  inline void set_row_key(const char* value, size_t size);
  inline ::std::string* mutable_row_key();
  inline ::std::string* release_row_key();
  inline void set_allocated_row_key(::std::string* row_key);

  // required string column_family = 2;
  inline bool has_column_family() const;
  inline void clear_column_family();
  static const int kColumnFamilyFieldNumber = 2;
  inline const ::std::string& column_family() const;
  inline void set_column_family(const ::std::string& value);
  inline void set_column_family(const char* value);
  inline void set_column_family(const char* value, size_t size);
  inline ::std::string* mutable_column_family();
  inline ::std::string* release_column_family();
  inline void set_allocated_column_family(::std::string* column_family);

  // required string column = 3;
  inline bool has_column() const;
  inline void clear_column();
  static const int kColumnFieldNumber = 3;
  inline const ::std::string& column() const;
  inline void set_column(const ::std::string& value);
  inline void set_column(const char* value);
  inline void set_column(const char* value, size_t size);
  inline ::std::string* mutable_column();
  inline ::std::string* release_column();
  inline void set_allocated_column(::std::string* column);

  // required int64 timestamp = 4;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 4;
  inline ::google::protobuf::int64 timestamp() const;
  inline void set_timestamp(::google::protobuf::int64 value);

  // optional bytes value = 5;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 5;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const void* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:ColumnCommitEntry)
 private:
  inline void set_has_row_key();
  inline void clear_has_row_key();
  inline void set_has_column_family();
  inline void clear_has_column_family();
  inline void set_has_column();
  inline void clear_has_column();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* row_key_;
  ::std::string* column_family_;
  ::std::string* column_;
  ::google::protobuf::int64 timestamp_;
  ::std::string* value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_formats_2eproto();
  friend void protobuf_AssignDesc_formats_2eproto();
  friend void protobuf_ShutdownFile_formats_2eproto();

  void InitAsDefaultInstance();
  static ColumnCommitEntry* default_instance_;
};
// ===================================================================


// ===================================================================

// ColumnCommitEntry

// required string row_key = 1;
inline bool ColumnCommitEntry::has_row_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ColumnCommitEntry::set_has_row_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ColumnCommitEntry::clear_has_row_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ColumnCommitEntry::clear_row_key() {
  if (row_key_ != &::google::protobuf::internal::kEmptyString) {
    row_key_->clear();
  }
  clear_has_row_key();
}
inline const ::std::string& ColumnCommitEntry::row_key() const {
  return *row_key_;
}
inline void ColumnCommitEntry::set_row_key(const ::std::string& value) {
  set_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    row_key_ = new ::std::string;
  }
  row_key_->assign(value);
}
inline void ColumnCommitEntry::set_row_key(const char* value) {
  set_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    row_key_ = new ::std::string;
  }
  row_key_->assign(value);
}
inline void ColumnCommitEntry::set_row_key(const char* value, size_t size) {
  set_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    row_key_ = new ::std::string;
  }
  row_key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ColumnCommitEntry::mutable_row_key() {
  set_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    row_key_ = new ::std::string;
  }
  return row_key_;
}
inline ::std::string* ColumnCommitEntry::release_row_key() {
  clear_has_row_key();
  if (row_key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = row_key_;
    row_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ColumnCommitEntry::set_allocated_row_key(::std::string* row_key) {
  if (row_key_ != &::google::protobuf::internal::kEmptyString) {
    delete row_key_;
  }
  if (row_key) {
    set_has_row_key();
    row_key_ = row_key;
  } else {
    clear_has_row_key();
    row_key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string column_family = 2;
inline bool ColumnCommitEntry::has_column_family() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ColumnCommitEntry::set_has_column_family() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ColumnCommitEntry::clear_has_column_family() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ColumnCommitEntry::clear_column_family() {
  if (column_family_ != &::google::protobuf::internal::kEmptyString) {
    column_family_->clear();
  }
  clear_has_column_family();
}
inline const ::std::string& ColumnCommitEntry::column_family() const {
  return *column_family_;
}
inline void ColumnCommitEntry::set_column_family(const ::std::string& value) {
  set_has_column_family();
  if (column_family_ == &::google::protobuf::internal::kEmptyString) {
    column_family_ = new ::std::string;
  }
  column_family_->assign(value);
}
inline void ColumnCommitEntry::set_column_family(const char* value) {
  set_has_column_family();
  if (column_family_ == &::google::protobuf::internal::kEmptyString) {
    column_family_ = new ::std::string;
  }
  column_family_->assign(value);
}
inline void ColumnCommitEntry::set_column_family(const char* value, size_t size) {
  set_has_column_family();
  if (column_family_ == &::google::protobuf::internal::kEmptyString) {
    column_family_ = new ::std::string;
  }
  column_family_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ColumnCommitEntry::mutable_column_family() {
  set_has_column_family();
  if (column_family_ == &::google::protobuf::internal::kEmptyString) {
    column_family_ = new ::std::string;
  }
  return column_family_;
}
inline ::std::string* ColumnCommitEntry::release_column_family() {
  clear_has_column_family();
  if (column_family_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = column_family_;
    column_family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ColumnCommitEntry::set_allocated_column_family(::std::string* column_family) {
  if (column_family_ != &::google::protobuf::internal::kEmptyString) {
    delete column_family_;
  }
  if (column_family) {
    set_has_column_family();
    column_family_ = column_family;
  } else {
    clear_has_column_family();
    column_family_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string column = 3;
inline bool ColumnCommitEntry::has_column() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ColumnCommitEntry::set_has_column() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ColumnCommitEntry::clear_has_column() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ColumnCommitEntry::clear_column() {
  if (column_ != &::google::protobuf::internal::kEmptyString) {
    column_->clear();
  }
  clear_has_column();
}
inline const ::std::string& ColumnCommitEntry::column() const {
  return *column_;
}
inline void ColumnCommitEntry::set_column(const ::std::string& value) {
  set_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    column_ = new ::std::string;
  }
  column_->assign(value);
}
inline void ColumnCommitEntry::set_column(const char* value) {
  set_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    column_ = new ::std::string;
  }
  column_->assign(value);
}
inline void ColumnCommitEntry::set_column(const char* value, size_t size) {
  set_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    column_ = new ::std::string;
  }
  column_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ColumnCommitEntry::mutable_column() {
  set_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    column_ = new ::std::string;
  }
  return column_;
}
inline ::std::string* ColumnCommitEntry::release_column() {
  clear_has_column();
  if (column_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = column_;
    column_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ColumnCommitEntry::set_allocated_column(::std::string* column) {
  if (column_ != &::google::protobuf::internal::kEmptyString) {
    delete column_;
  }
  if (column) {
    set_has_column();
    column_ = column;
  } else {
    clear_has_column();
    column_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 timestamp = 4;
inline bool ColumnCommitEntry::has_timestamp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ColumnCommitEntry::set_has_timestamp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ColumnCommitEntry::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ColumnCommitEntry::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::int64 ColumnCommitEntry::timestamp() const {
  return timestamp_;
}
inline void ColumnCommitEntry::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// optional bytes value = 5;
inline bool ColumnCommitEntry::has_value() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ColumnCommitEntry::set_has_value() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ColumnCommitEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ColumnCommitEntry::clear_value() {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& ColumnCommitEntry::value() const {
  return *value_;
}
inline void ColumnCommitEntry::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ColumnCommitEntry::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(value);
}
inline void ColumnCommitEntry::set_value(const void* value, size_t size) {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ColumnCommitEntry::mutable_value() {
  set_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    value_ = new ::std::string;
  }
  return value_;
}
inline ::std::string* ColumnCommitEntry::release_value() {
  clear_has_value();
  if (value_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ColumnCommitEntry::set_allocated_value(::std::string* value) {
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}


// @@protoc_insertion_point(namespace_scope)

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_formats_2eproto__INCLUDED
